basePath: /api/v1
definitions:
  dto.LoginRequest:
    description: Login request payload
    properties:
      password:
        example: xxxxxxx
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.ProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  dto.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      name:
        example: johndoe
        type: string
      password:
        example: xxxxxxx
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  pkg.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A RESTful API for managing bookstore inventory and users
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Bookstore Management API
  version: 1.0.0
paths:
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user account
      parameters:
      - description: User information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Login successfully
          schema:
            allOf:
            - $ref: '#/definitions/pkg.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Invalid Request format
          schema:
            $ref: '#/definitions/pkg.Response'
      summary: Login user
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get user account
      produces:
      - application/json
      responses:
        "201":
          description: Profile retrieve successfully
          schema:
            allOf:
            - $ref: '#/definitions/pkg.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProfileResponse'
              type: object
        "400":
          description: Invalid Request format
          schema:
            $ref: '#/definitions/pkg.Response'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/pkg.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
        "400":
          description: Invalid Request format
          schema:
            $ref: '#/definitions/pkg.Response'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
